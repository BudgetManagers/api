name: Version Bumper on Merge to Main
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  version-bumper:
    if: github.event.pull_request.merged == true &&
        !contains(github.event.pull_request.labels.*.name, 'version-bump-pr')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.BUDGET_MANAGER_WORKFLOW_TOKEN }}
      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "action@github.com"
      # - name: Determineversion bump type
      #   id: bump-type
      #   run: |
      #     if [[ $(curl -s -H "Authorization: token ${{ secrets.BUDGET_MANAGER_WORKFLOW_TOKEN }}" \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}) \
      #       | jq -r '.labels[].name' | grep -c 'major' ]] ; then
      #       echo "BUMP_TYPE=major" >> $API_BUMP_TYPE
      #     elif [[ $(curl -s -H "Authorization: token ${{ secrets.BUDGET_MANAGER_WORKFLOW_TOKEN }}" \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}) \
      #       | jq -r '.labels[].name' | grep -c 'minor' ]] ; then
      #       echo "BUMP_TYPE=minor" >> $API_BUMP_TYPE
      #     else
      #       echo "BUMP_TYPE=patch" >> $API_BUMP_TYPE
      #     fi

      - name: version-bumper
        run: |
          # Enable error tracing
          set -x
          
          # Check if VERSION file exists
          if [ ! -f VERSION ]; then
            echo "::error::VERSION file not found in repository root"
            ls -la
            echo "Creating initial VERSION file..."
            echo "0.0.0" > VERSION
          fi

          echo "Current directory contents:"
          ls -la

          # Read the current version from the VERSION file
          current_version=$(cat VERSION)

          # Split version into components
          IFS="." read -r -a version_parts <<< "$current_version"

          # Increment the patch version
          ((version_parts[2]++))
          
          # Create new version string
          new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"

          # Update the version file
          echo "$new_version" > VERSION
          echo "Bumped version to $new_version"

          # Commit and push the changes
          branch_name="bump-version-${new_version}"
          git checkout -b "$branch_name" || {
            echo "Failed to create branch $branch_name"
            exit 1
          }
          git add VERSION
          git commit -m "Bump version to $new_version [skip ci]" || {
            echo "No changes to commit"
            exit 0
          }
          
          git push origin "$branch_name" || {
            echo "Failed to push branch"
            exit 1
          }

          # Create a pull request
          pr_response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.BUDGET_MANAGER_WORKFLOW_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{
              \"title\": \"Bump version to ${new_version}\",
              \"head\": \"${branch_name}\",
              \"base\": \"main\",
              \"body\": \"Automated version bump\",
              \"labels\": [\"version-bump-pr\"]
            }")

          echo "Pull request creation response:"
          echo "$pr_response"

          # Check if PR was created successfully
          if echo "$pr_response" | grep -q "\"url\":"; then
            echo "Pull request created successfully"
          else
            echo "Failed to create pull request"
            echo "$pr_response"
            exit 1
          fi